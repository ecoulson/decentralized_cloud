syntax = "proto3";
package data_center;

message Resources {
  /// available ram in mb
  uint32 ram_mb = 1;
  /// available disk in mb
  uint32 disk_mb = 2;
  /// available disk in mb
  uint32 vcpus = 3;
}

/// State of the machine
enum InstanceState {
  Stopped = 0;
  Started = 1;
}

message Machine {
  /// Id of the machine
  string machine_id = 1;
  /// Image associated with the machine
  OsImageMetadata image_metadata = 2;
  /// Required resources for the machine
  Resources resources = 3;
}

message Instance {
  /// Id of the instance
  string instance_id = 1;
  /// Machine that instance is based on at creation time
  Machine machine = 2;
  /// Id of the process on the host
  string process_id = 3;
  /// Ip address of the instance
  string ip_address = 4;
  /// Current state of the instance
  InstanceState state = 5;
}

message CheckResourceRequest {}

message CheckResourceResponse {
  /// Available resources in the data center
  Resources available_resources = 1;
}

message CreateMachineRequest {
  /// Requested resources for ths provisioned request
  Resources resources = 1;
  /// Id of os image to use
  string image_id = 2;
}

message CreateMachineResponse {
  /// Created machine
  Machine machine = 1;
}

message ProvisionInstanceRequest {
  /// Id of the machine to provision into an instance
  string machine_id = 1;
}

message ProvisionInstanceResponse { Instance instance = 1; }

message GetImageMetadataRequest {
  /// Id of the image
  string image_id = 1;
}

message GetImageMetadataResponse {
  /// Requested OS image
  OsImageMetadata image = 1;
}

message CreateImageMetadataRequest {
  /// File size of the image
  uint64 file_size = 1;
  /// File path local path to the file
  string destination_file_path = 2;
}

message CreateImageMetadataResponse {
  /// Id of the image
  OsImageMetadata os_image_metadata = 1;
}

message OsImageMetadata {
  /// Id of the image
  string image_id = 1;
  /// Metadata of the image file
  FileMetadata file_metadata = 2;
}

message Chunk {
  /// Data of the chunk
  bytes data = 1;
  /// Start of the chunk in the file
  uint64 start = 2;
  /// End of the chunk in the file
  uint64 end = 3;
}

enum ServiceType {
  Storage = 0;
  Compute = 1;
  OperatingSystemImages = 2;
}

message FindServiceRequest {
  /// Type of service to lookup
  ServiceType service = 1;
}

message FindServiceResponse {
  /// Host name of service
  string host_name = 1;
}

message CreateFileMetadataRequest {
  /// File path the file lives at
  string file_path = 1;
  /// File size
  uint64 file_size = 2;
}

message CreateFileMetadataResponse {
  /// metadata about the file
  FileMetadata metadata = 1;
}

message FileMetadata {
  /// Path to file
  string file_path = 1;
  /// Size of the file
  uint64 file_size = 2;
  /// Version of the file
  uint32 version = 3;
}

message UploadFileRequest {
  /// File path to write the chunk to
  string file_path = 1;
  /// Chunk
  Chunk chunk = 2;
}

message UploadFileResponse {
  /// Number of bytes written
  uint64 bytes_written = 1;
}

message GetFileMetadataRequest {
  /// File path where file lives
  string file_path = 1;
}

message GetFileMetadataResponse {
  /// Retrieved metadata
  FileMetadata metadata = 1;
}

message DownloadFileRequest {
  /// Source to read file from
  string source_path = 1;
}

message DownloadFileResponse {
  /// Chunk of data to write
  Chunk chunk = 1;
}

message ListImageMetadataRequest {}

message ListImageMetadataResponse {
  /// List of os image metadata
  repeated OsImageMetadata metadata = 1;
}

message StartInstanceRequest {
  /// Id of the machine to start
  string instance_id = 1;
}

message StartInstanceResponse {
  /// Instance of the started machine
  Instance instance = 1;
}

message StopInstanceRequest {
  /// Id of the instance to stop
  string instance_id = 1;
}

message ListMachinesRequest {}

message ListMachinesResponse {
  /// Machine defined in the data center
  repeated Machine machine = 1;
}

message ListInstancesRequest {}

message ListInstancesResponse {
  /// Instance of a machine defined in the data center
  repeated Instance instance = 1;
}

message StopInstanceResponse {}

service DataCenter {
  rpc CheckResource(CheckResourceRequest) returns (CheckResourceResponse);
  rpc ProvisionInstance(ProvisionInstanceRequest)
      returns (ProvisionInstanceResponse);
  rpc CreateImageMetadata(CreateImageMetadataRequest)
      returns (CreateImageMetadataResponse);
  rpc GetImageMetadata(GetImageMetadataRequest)
      returns (GetImageMetadataResponse);
  rpc CreateFileMetadata(CreateFileMetadataRequest)
      returns (CreateFileMetadataResponse);
  rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse);
  rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse);
  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);
  rpc ListImageMetadata(ListImageMetadataRequest)
      returns (ListImageMetadataResponse);
  rpc StartInstance(StartInstanceRequest) returns (StartInstanceResponse);
  rpc StopInstance(StopInstanceRequest) returns (StopInstanceResponse);
  rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResponse);
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse);
}
